generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id                     String               @id @default(cuid())
  email                  String               @unique
  hashedPassword         String
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  active                 Boolean              @default(false)
  stripeCustomerId       String?              @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?              @unique @map("stripe_subscription_id")
  stripePriceId          String?              @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?            @map("stripe_current_period_end")
  images                 Images[]
  activateTokens         ActivateToken[]
  passwordResetTokens    PasswordResetToken[]
  sessions               Session[]
  premiumTokens          PremiumTokens[]
  company                Company?
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  activatedAt DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}


model Product {
  id               String         @id @default(cuid())
  name             String
  description      String?        @db.Text
  mainImage        String
  images           Json
  category         Json
  prices           Json
  deliveryPrice    Float?
  minQuantity    Int
  maxQuantity    Int
  minPrice    Float
  maxPrice    Float
  customizations   Json
  customProperties Json
  companyId        String
  promotedTo       DateTime?
  createdAt        DateTime       @default(now())
  company          Company        @relation(fields: [companyId], references: [id])
  offers           Offer[]

  @@index([companyId])
}

model Offer {
  id         String    @id @default(cuid())
  productId  String
  senderId   String
  receiverId String
  message    String
  quantity   Int
  product    Product   @relation(fields: [productId], references: [id])
  sender     Company   @relation("OfferSender", fields: [senderId], references: [id])
  receiver   Company   @relation("OfferReceiver", fields: [receiverId], references: [id])
  messages   Message[]

  @@index([productId])
  @@index([senderId])
  @@index([receiverId])
}

model Message {
  id              String   @id @default(cuid())
  offerId         String
  senderCompanyId String
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  offer           Offer    @relation(fields: [offerId], references: [id])
  senderCompany   Company  @relation(fields: [senderCompanyId], references: [id])

  @@index([offerId])
  @@index([senderCompanyId])
}

model Company {
  id              String           @id @default(cuid())
  userId          String           @unique
  name            String
  description     String?          @db.Text
  type            CompanyType
  mainProducts    Json?
  city            String
  street          String
  postCode        String
  image           String?
  website         String?
  phone           String
  country         String
  establishment   Int
  sentOffers      Offer[]          @relation("OfferSender")
  receivedOffers  Offer[]          @relation("OfferReceiver")
  user            User             @relation(fields: [userId], references: [id])
  products        Product[]
  messages        Message[]

  @@index([userId])
}


model Images {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PremiumTokens {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  type      PremiumTokenType
  createdAt DateTime  @default(now())
  endsAt    DateTime  
  usedAt   DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum PremiumTokenType {
  PromotionBase
  PromotionBuyed
  BumpBase
  BumpBuyed
}

enum CompanyType {
  Producent
  Importer
  Factory
}
