// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  hashedPassword String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  company       Company?
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum CompanyType {
  Producent
  Importer
  Factory
}

model Product {
  id                String   @id @default(cuid())
  name              String
  description       String?            // Optional
  mainImage         String?            // Optional
  images            Json               // Json type to represent a list of strings
  category          Json   
  prices            Json               // Array of objects of price, minQuantity, maxQuantity
  deliveryPrice     Float?             // Optional value
  customizations    Json               // Array of customization objects with name and minQuantity
  customProperties  Json               // Array of custom properties with name and value
  companyId         String
  representativeId  String
  company           Company            @relation(fields: [companyId], references: [id])
  representative    Representative     @relation(fields: [representativeId], references: [id])

  @@index([companyId])
  @@index([representativeId])
}

model Company {
  id               String          @id @default(cuid())
  userId           String          @unique
  name             String
  type             CompanyType
  mainProducts     Json?
  city             String
  street           String
  postCode         String
  image            String?
  website          String?
  phone            String
  country          String
  establishment    Int
  user             User            @relation(fields: [userId], references: [id])
  representatives  Representative[]
  products         Product[]
  @@index([userId])
}

model Representative {
  id        String   @id @default(cuid())
  companyId String
  name      String
  email     String   @unique
  phone     String
  company   Company  @relation(fields: [companyId], references: [id])
  products   Product[]
  @@index([companyId])
}
